/* Auto-generated by genmsg_cpp for file /home/vibek/aruco_mapping_filter/msg/MarkerArray.msg */
#ifndef ARUCO_MAPPING_FILTER_MESSAGE_MARKERARRAY_H
#define ARUCO_MAPPING_FILTER_MESSAGE_MARKERARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "aruco_mapping_filter/Marker.h"

namespace aruco_mapping_filter
{
template <class ContainerAllocator>
struct MarkerArray_ {
  typedef MarkerArray_<ContainerAllocator> Type;

  MarkerArray_()
  : header()
  , markers()
  {
  }

  MarkerArray_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , markers(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::aruco_mapping_filter::Marker_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::aruco_mapping_filter::Marker_<ContainerAllocator> >::other >  _markers_type;
  std::vector< ::aruco_mapping_filter::Marker_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::aruco_mapping_filter::Marker_<ContainerAllocator> >::other >  markers;


  typedef boost::shared_ptr< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MarkerArray
typedef  ::aruco_mapping_filter::MarkerArray_<std::allocator<void> > MarkerArray;

typedef boost::shared_ptr< ::aruco_mapping_filter::MarkerArray> MarkerArrayPtr;
typedef boost::shared_ptr< ::aruco_mapping_filter::MarkerArray const> MarkerArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aruco_mapping_filter

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9d486b76ee1f72a8b0d33e8c66a97306";
  }

  static const char* value(const  ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9d486b76ee1f72a8ULL;
  static const uint64_t static_value2 = 0xb0d33e8c66a97306ULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aruco_mapping_filter/MarkerArray";
  }

  static const char* value(const  ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
Marker[] markers\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: aruco_mapping_filter/Marker\n\
Header header\n\
uint32 id\n\
geometry_msgs/PoseWithCovariance pose\n\
float64 confidence\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.markers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MarkerArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aruco_mapping_filter::MarkerArray_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "markers[]" << std::endl;
    for (size_t i = 0; i < v.markers.size(); ++i)
    {
      s << indent << "  markers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::aruco_mapping_filter::Marker_<ContainerAllocator> >::stream(s, indent + "    ", v.markers[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARUCO_MAPPING_FILTER_MESSAGE_MARKERARRAY_H

