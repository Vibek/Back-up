/*********************************************************************************************//**
* @file filter.cpp
*
* Image filter for sharping edges and removing reflection

******************************************************************************/


#ifndef FILTER_CPP
#define FILTER_CPP

#include <filter.h>

namespace image_filtering_for_aruco
{

Filter::Filter(ros::NodeHandle* nh, image_transport::ImageTransport *it_nh)
{
  nh->getParam("threshold",user_threshold);
  
  // If threshold value greater than limit, make it zero 
  if(user_threshold > 255)
    user_threshold = 0;
   
  // Filtered image publisher
  filtered_image_pub = it_nh->advertise("/camera/image_raw_filtered",1);
  
}

Filter::~Filter()
{

}

void
Filter::ImageCallback(const sensor_msgs::ImageConstPtr &original_image)
{
  // Format original image
  cv_ptr = cv_bridge::toCvCopy(original_image, sensor_msgs::image_encodings::MONO8);
    
  // OpenCV to MAT structure
  I = cv_ptr->image;

  // Gaussian Blur sharpen filter
  cv::GaussianBlur(I, I_filtered, cv::Size(0,0),2);
  
  // Weights
  cv::addWeighted(I, 2.5, I_filtered, -1.5, 0, I_filtered);
  
  // Equalize histogram
  cv::equalizeHist(I_filtered,I_filtered);

  // Treshold
  cv::threshold(I_filtered,I_filtered,user_threshold,0,3);

  // Creating filtered image_raw and publishing
  cv_bridge::CvImagePtr in_msg;
  in_msg = cv_ptr;
  cv_bridge::CvImage out_msg;
   
  // Timestamp and tf frame same as input image
  out_msg.header=in_msg->header;
  
  // Format image
  out_msg.encoding=sensor_msgs::image_encodings::MONO8;
  out_msg.image=I_filtered;

  // Publishing
  filtered_image_pub.publish(out_msg.toImageMsg());  
}

} //image_filtering_for_aruco

#endif  //FILTER_CPP
